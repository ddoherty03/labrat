* Labrat

A linux command-line command for printing labels.

** Motivation

I need to print labels, and in my case, mostly file folder labels.  I
typically want to print to a Dymo LabelWriter, of which I own several
variants.  The problem is that I work almost entirely in Linux, but the simple
task of printing file folder labels has required opening a GUI application,
such as the very fine glabels, or worse, switching to a Windows or Mac to run
Dymo's proprietary GUI.  The Dymo GUI is particularly irksome because it takes
a long time to start up and demands that you register every time you open it.

I longed for a way to just print a file label from the command line, and even
better, from within my editor, Emacs.  After giving up looking for such a
thing without success, I decided to write my own.  Hence labrat.  With
it---after due configuration---printing a file folder label is as simple as:

#+begin_src sh
  $ labrat 'First Line of Label++And the Second Line'
  #+end_src

Or, you can preview the label in your previewer of choice (mine is qpdfview)
by adding the -V flag:

#+begin_src sh
  $ labrat -V 'First Line of Label++And the Second Line'
  #+end_src

Even better, I have included with labrat an elisp file (=labrat.el=) that will
invoke labrat to form a label with the text of the paragraph at or before
point.  So within Emacs, you can bind a key to the commands, =labrat-print=
and =labrat-view= to print the current or prior paragraph as your default
label.  Thus, in Emacs, I have ~C-z C-l C-l~ bound to =labrat-print= and ~C-z
C-l C-v~ to =labrat-view=, and I can type a label in any buffer and get it
printed with very little ceremony.

** Installation

Since labrat is distributed as a Ruby gem, you have to have a ruby
installation.  You can then install =labrat= with:

#+begin_SRC sh
  $ gem install labrat
#+end_SRC

After installation, you should install the user and system configuration files
with:

#+begin_SRC sh
  $ labrat-install
#+end_SRC

This will install an annotated system-wide config file in
=/etc/xdg/labrat/config.yml= and a system-wide label database in
=/etc/xdg/labrat/labeldb.yml=.

It will also install an annotated sample user config file in
=~/.config/labrat/labrat.el= and a sample label database in
=~/.config/labrat/labeldb.yml=.

For the benefit of Emacs user, it also installs the =labrat.el= elisp library
in =~/.config/labrat= as well, though you may want to move it to a different
location.

You can invoke =labrat-install= multiple times because it will refuse to
overwrite any existing config or database files that you may have edited.  If
you want to re-install them you have to move them out of the way.

** Setting options

You can control how =labrat= composes a label completely from the
command-line, though that would be a very tedious thing to have to do.
Better, set up your preferred configuration in your user config file, so that
all you need to supply on the command line is the text of the label.  Every
command-line option has an equivalent configuration option using the long form
of the option as a key in a YAML configuration format.

Labrat reads options from the following locations, with the locations listed
from lowest to highest priority.  In other words, options set in the
first-listed location can be overriden by settings in later-listed locations.

1. It reads system-wide options from =/etc/xdg/labrat/config.yml=.  This is a
   YAML formatted file in which the long form of the option, without the
   leading '--', is used as a key with the setting as the value.
2. It reads a user configuration from =~/.config/labrat/config.yml=.  It also
   uses the YAML format based on the long form of option names.
3. Finally, it reads options from the command-line, where, of course, the
   leading hyphens are mandatory.

** Dimensions and other values in options
Many of the options deal with specifying some sort of distance.  Those are
designated with the placeholder ~DIM~.  A ~DIM~ is an integer or floating
point number followed by an optional unit of measurement.  If no unit is
given, the unit ~pt~ for "points" are assumed.  Here are the valid units that
you can use:

- ~pt~ :: Points, or Adobe points, or "big points", equal to exactly 1/72 of
  an inch, the default if no unit is given
- ~mm~ :: Millimeters,
- ~cm~ :: Centimeters, equal to 10 millimeters,
- ~dm~ :: Decimeters, equal to 10 centimeters,
- ~in~ :: Inches,
- ~ft~ :: Feet, equal to 12 inches,
- ~yd~ :: Yard, equal to 3 feet.

Most other options are strings, which need to be quoted on the command-line if
they contain any spaces or other characters special to your shell.  In the
configuration files, string values need not be quoted.

** Page Setup Options
Labrat can handle multi-label pages such as Avery-style label sheets.  These
options deal with the page-level dimensions of the, potentially, multi-label
page.  By contrast, the dimensions of individual labels are dealt with by the
label setup options described in the next section.

When specifying page dimensions, labrat regards all dimension-related
directions, left, right, top, bottom to refer to the page as is comes out of
the printer, unaffected by whether the labels are printed in landscape or
portrait.  This hopefully eliminates some confusion in the use of those terms.
Even a specialty label printer, such as the Dymo LabelWriter series, in which
the long skinny labels come out of the printer sideways, regard the page
dimensions in the orientation that the labels come out: that is, the "page"
has a relatively narrow width compared to its tall height.

With that in mind, specifying the page dimensions is just a matter of getting
out a ruler and measuring.

- ~-w, --page-width=DIM~ :: Horizontal dimension of a page of labels as it comes out of the printer
- ~-h, --page-height=DIM~ :: Vertical dimension of a page of labels as it comes out of the printer
- ~-R, --rows=NUM~ :: Number of rows of labels on a page
- ~-C, --columns=NUM~ :: Number of columns of labels on a page
- ~--row-gap=DIM~ :: Vertical space between rows of labels on a page
- ~--column-gap=DIM~ :: Horizontal space between columns of labels on a page
- ~--right-page-margin=DIM~ :: Distance from right side of page (in portrait) to print area
- ~--left-page-margin=DIM~ :: Distance from left side of page (in portrait) to print area
- ~--top-page-margin=DIM~ :: Distance from top side of page (in portrait) to print area
- ~--bottom-page-margin=DIM~ :: Distance from bottom side of page (in portrait) to print area
- ~--h-page-margin=DIM~ :: Distance from left and right sides of page (in portrait) to print area
- ~--v-page-margin=DIM~ :: Distance from top and bottom sides of page (in portrait) to print area
- ~--page-margin=DIM~ :: Distance from all sides of page (in portrait) to print area

** Label Setup Options

** Processing Options

** The Label Database and the --label=<name> Option

* Development

After checking out the repo, run `bin/setup` to install dependencies. Then,
run `rake spec` to run the tests. You can also run `bin/console` for an
interactive prompt that will allow you to experiment.

To install this gem onto your local machine, run `bundle exec rake
install`. To release a new version, update the version number in `version.rb`,
and then run `bundle exec rake release`, which will create a git tag for the
version, push git commits and the created tag, and push the `.gem` file to
[rubygems.org](https://rubygems.org).

* Contributing

Bug reports and pull requests are welcome on GitHub at
https://github.com/ddoherty03/labrat.
